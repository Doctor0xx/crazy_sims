@page "/incidentedit"
@using Microsoft.AspNetCore.Http.Extensions
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore

<PageTitle>Edit Incident</PageTitle>

<h1>Incident</h1>

<div style="max-width: 500px; margin-top:20px">
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="date">Date:</label>
        <input type="date" id="date" class="form-control" style="width: 150px" @bind-value="incident.Reported_at" />
    </div>
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="title">Title:</label>
        <input type="text" id="title" class="form-control" @bind-value="incident.Title" />
    </div>
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="description">Description:</label>
        <input type="text" id="description" class="form-control" @bind-value="incident.Description" />
    </div>
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="resourceid">Resource ID:</label>
        <input type="text" id="resourceid" class="form-control" @bind-value="incident.Resource_id" />
    </div>    
    <div class="form-group" style="margin-bottom: 10px;">
        <label for="incidenttype">Type:</label>
        <select id="incidenttype" class="form-control" style="width: 150px" @bind="incident.Incident_type">
            @{int i = 1;}
            @foreach (var item in incidenttypeArray)
            {
                <option value=@i>@item</option>
                i++;
            }
        </select>
    </div>
    <div class="form-group" style="margin-bottom: 10px; margin-top: 10px;">
        <label for="closed">Closed:</label>
        <input type="checkbox" id="closed" @bind="incident.Resolved">
    </div>
    <hr />
    <div class="form-group" style="margin-top: 10px;">
        <button type="button" class="btn btn-success" @onclick="cmdSave_Clicked">Save incident</button>
        <button type="button" class="btn btn-warning" @onclick="cmdEscalate_Clicked">Escalate</button>
        <span class="text-danger" style="margin-left: 10px; font-weight: bold">@escalateMessage</span>
    </div>

</div>


@code {
    private int id = 0;

    Incident incident = new Incident();
    string[] incidenttypeArray { get; set; } = new[] { "Ticket", "Issue", "Informational", "Problem" };

    string escalateMessage = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            if (incident.Incident_id == 0) incident.Reporter = (await ProtectedSessionStore.GetAsync<string>("username")).Value ?? "";
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
        {
            id = Convert.ToInt32(_id);
            if (id > 0) incident = new Incident(id);
        }
    }

    private void cmdSave_Clicked()
    {
        incident.Save();
        NavManager.NavigateTo("incidents");
    }

    private async Task cmdEscalate_Clicked()
    {
        try
        {
            // AWS credentials
            string awsAccessKey = Environment.GetEnvironmentVariable("awsAccessKey");
            string awsSecretKey = Environment.GetEnvironmentVariable("awsSecretKey");
            string awsRegion = "ap-northeast-1";
            string service = "execute-api";

            // API Gateway URL
            string lambdaApiUrl = "https://3m2bdnihq0.execute-api.ap-northeast-1.amazonaws.com/default/IncidentEscalationHandler";

            // Create the payload from the incident data
            var payload = new
            {
                Title = incident.Title,
                Description = incident.Description,
                Date = incident.Reported_at.ToString("yyyy-MM-ddTHH:mm:ssZ"),
                ResourceId = incident.Resource_id,
                Type = incidenttypeArray[incident.Incident_type - 1],
                Closed = incident.Resolved
            };

            // Convert payload to JSON
            string jsonPayload = System.Text.Json.JsonSerializer.Serialize(payload);

            // Create a request message
            var request = new HttpRequestMessage(HttpMethod.Post, lambdaApiUrl);
            request.Content = new StringContent(jsonPayload, System.Text.Encoding.UTF8, "application/json");

            // Add AWS SigV4 authentication
            await SignRequestAsync(request, awsAccessKey, awsSecretKey, awsRegion, service, jsonPayload);

            // Send the request
            using var httpClient = new HttpClient();
            var response = await httpClient.SendAsync(request);
            
            // Handle response
            if (response.IsSuccessStatusCode)
            {
                string responseBody = await response.Content.ReadAsStringAsync();
                escalateMessage = "Incident escalated successfully!";
            }
            else
            {
                escalateMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            escalateMessage = $"Error: {ex.Message}";
        }
    }


    private async Task SignRequestAsync(HttpRequestMessage request, string accessKey, string secretKey, string region, string service, string content)
    {
        // Current time in ISO8601 format - Fix the format to match AWS expectations
        string amzDate = DateTime.UtcNow.ToString("yyyyMMddTHHmmssZ");
        string dateStamp = DateTime.UtcNow.ToString("yyyyMMdd");
        
        // Make sure we don't add headers that might already exist
        request.Headers.Remove("X-Amz-Date");
        request.Headers.Remove("Host");
        request.Headers.Remove("Authorization");
        
        // Add required headers
        request.Headers.Add("X-Amz-Date", amzDate);
        
        // Get content type with charset
        string contentTypeHeader = "application/json; charset=utf-8";
        
        // Get host without adding a header (will be added automatically by HttpClient)
        string host = new Uri(request.RequestUri.AbsoluteUri).Host;
        
        // Task 1: Create a canonical request
        string canonicalUri = request.RequestUri.AbsolutePath;
        string canonicalQueryString = string.Empty;
        
        // Create canonical headers - pay attention to format
        var canonicalHeaders = new StringBuilder();
        canonicalHeaders.Append($"content-type:{contentTypeHeader}\n");
        canonicalHeaders.Append($"host:{host}\n");
        canonicalHeaders.Append($"x-amz-date:{amzDate}\n");
        
        string signedHeaders = "content-type;host;x-amz-date";
        
        // Create payload hash - ensure we're calculating this correctly
        string payloadHash = CreateHash(content);
        
        // Create canonical request
        string canonicalRequest = $"{request.Method}\n{canonicalUri}\n{canonicalQueryString}\n{canonicalHeaders}\n{signedHeaders}\n{payloadHash}";
        
        // Task 2: Create a string to sign
        string algorithm = "AWS4-HMAC-SHA256";
        string credentialScope = $"{dateStamp}/{region}/{service}/aws4_request";
        string stringToSign = $"{algorithm}\n{amzDate}\n{credentialScope}\n{CreateHash(canonicalRequest)}";
        
        // Task 3: Calculate the signature
        byte[] signingKey = GetSignatureKey(secretKey, dateStamp, region, service);
        string signature = ToHexString(HmacSha256(stringToSign, signingKey));
        
        // Task 4: Add the signature to the request - format is very specific
        string authorizationHeader = $"{algorithm} " +
                                    $"Credential={accessKey}/{credentialScope}, " +
                                    $"SignedHeaders={signedHeaders}, " +
                                    $"Signature={signature}";
        
        // Update the content type to match what we signed
        if (request.Content != null)
        {
            request.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/json");
            request.Content.Headers.ContentType.CharSet = "utf-8";
        }
        
        request.Headers.TryAddWithoutValidation("Authorization", authorizationHeader);
    }

    private string CreateHash(string input)
    {
        using (var sha256 = System.Security.Cryptography.SHA256.Create())
        {
            var bytes = System.Text.Encoding.UTF8.GetBytes(input);
            var hash = sha256.ComputeHash(bytes);
            return ToHexString(hash);
        }
    }

    private byte[] HmacSha256(string data, byte[] key)
    {
        using (var hmac = new System.Security.Cryptography.HMACSHA256(key))
        {
            return hmac.ComputeHash(System.Text.Encoding.UTF8.GetBytes(data));
        }
    }

    private byte[] GetSignatureKey(string key, string dateStamp, string regionName, string serviceName)
    {
        byte[] kDate = HmacSha256(dateStamp, System.Text.Encoding.UTF8.GetBytes($"AWS4{key}"));
        byte[] kRegion = HmacSha256(regionName, kDate);
        byte[] kService = HmacSha256(serviceName, kRegion);
        byte[] kSigning = HmacSha256("aws4_request", kService);
        return kSigning;
    }

    private string ToHexString(byte[] array)
    {
        return BitConverter.ToString(array).Replace("-", "").ToLowerInvariant();
    }
}